- name: Create MSSQL 2022
  containers.podman.podman_container:
    name: mssql
    image: mcr.microsoft.com/mssql/server:2022-latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1433:1433
    env:
      SA_PASSWORD: '{{ myPassword }}'
      ACCEPT_EULA: 'Y'
      MSSQL_COLLATION: 'SQL_Latin1_General_CP1_CI_AS'
    healthcheck: '/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P {{ myPassword }} -Q "SELECT 1" -b -o /dev/null'
    healthcheck_interval: "10s"
    healthcheck_retries: 10
    healthcheck_start_period: "10s"
    healthcheck_timeout: "3s"
    log_opt:
      max_size: 50mb
  become: yes
  tags: mssql2022

- name: Set MSSQL 2022 Facts
  set_fact:
    DBNAME: SQL Server 2022
    TOOLSVER: mssql-tools18
  tags: mssql2022

- name: Create MSSQL 2019
  containers.podman.podman_container:
    name: mssql
    image: mcr.microsoft.com/mssql/server:2019-latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1433:1433
    env:
      SA_PASSWORD: '{{ myPassword }}'
      ACCEPT_EULA: 'Y'
      MSSQL_COLLATION: 'SQL_Latin1_General_CP1_CI_AS'
    healthcheck: '/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P {{ myPassword }} -Q "SELECT 1" -b -o /dev/null'
    healthcheck_interval: "10s"
    healthcheck_retries: 10
    healthcheck_start_period: "10s"
    healthcheck_timeout: "3s"
    log_opt:
      max_size: 50mb
  become: yes
  tags: mssql2019

- name: Set MSSQL 2019 Facts
  set_fact:
    DBNAME: SQL Server 2019
    TOOLSVER: mssql-tools18
  tags: mssql2019

- name: Create MSSQL 2017
  containers.podman.podman_container:
    name: mssql
    image: mcr.microsoft.com/mssql/server:2017-latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1433:1433
    env:
      SA_PASSWORD: '{{ myPassword }}'
      ACCEPT_EULA: 'Y'
      MSSQL_COLLATION: 'SQL_Latin1_General_CP1_CI_AS'
    healthcheck: '/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P {{ myPassword }} -Q "SELECT 1" -b -o /dev/null'
    healthcheck_interval: "10s"
    healthcheck_retries: 10
    healthcheck_start_period: "10s"
    healthcheck_timeout: "3s"
    log_opt:
      max_size: 50mb
  become: yes
  tags: mssql2017

- name: Set MSSQL 2017 Facts
  set_fact:
    DBNAME: SQL Server 2017
    TOOLSVER: mssql-tools
  tags: mssql2017

- name: Pause for 30 seconds
  ansible.builtin.pause:
    seconds: 30
  tags: mssql

- name: Modify MSSQL
  containers.podman.podman_container_exec:
    name: mssql
    command: /opt/{{ TOOLSVER }}/bin/sqlcmd -C -S localhost -U SA -P {{ myPassword }} -Q "CREATE DATABASE {{ myUsername }}; CREATE LOGIN {{ myUsername }} WITH PASSWORD='{{ myPassword }}', DEFAULT_DATABASE={{ myUsername }}; ALTER SERVER ROLE sysadmin ADD MEMBER {{ myUsername }}; CREATE USER {{ myUsername }} FOR LOGIN {{ myUsername }}; ALTER USER {{ myUsername }} WITH DEFAULT_SCHEMA=dbo; ALTER ROLE db_owner ADD MEMBER {{ myUsername }}"
  become: yes
  tags: mssql

- name: Set MSSQL Facts
  set_fact:
    DBSHORT: MSSQL
    DBUSER: '{{ myUsername }}'
    DBPORT: 1433
  tags: mssql

- name: Create /home/oracle
  file:
    path: "/home/oracle"
    state: directory
    mode: '0777'
  become: yes
  tags: oracle

- name: Create oracle.sql
  copy:
    dest: "/home/oracle/oracle.sql"
    content: |
      ALTER SESSION SET "_ORACLE_SCRIPT"=true;
      CREATE USER {{ myUsername }} IDENTIFIED BY {{ myPassword }};
      GRANT ALL PRIVILEGES TO {{ myUsername }};
      GRANT SYSDBA TO {{ myUsername }};
      GRANT SELECT ON V_\$INSTANCE TO {{ myUsername }};
      EXIT;
  become: yes
  tags: oracle

- name: Create Oracle 23c FREE
  containers.podman.podman_container:
    name: oracle
    image: container-registry.oracle.com/database/free:23.3.0.0
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1521:1521
    volume: /home/oracle:/opt/oracle/scripts/startup
    env:
      ORACLE_PWD: '{{ myPassword }}'
      ORACLE_CHARACTERSET: 'AL32UTF8'
  become: yes
  tags: oracle23c

- name: Set Oracle 23c Facts
  set_fact:
    DBNAME: Oracle 23c FREE
    DBSHORT: ORACLE
    DBUSER: '{{ myUsername }} / SID - FREE'
    DBPORT: 1521
  tags: oracle23c

- name: Create Oracle 21c XE
  containers.podman.podman_container:
    name: oracle
    image: container-registry.oracle.com/database/express:21.3.0-xe
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1521:1521
    volume: /home/oracle:/opt/oracle/scripts/startup
    env:
      ORACLE_PWD: '{{ myPassword }}'
      ORACLE_CHARACTERSET: 'AL32UTF8'
  become: yes
  tags: oracle21c

- name: Set Oracle 21c Facts
  set_fact:
    DBNAME: Oracle 21c XE
    DBSHORT: ORACLE
    DBUSER: '{{ myUsername }} / SID - XE'
    DBPORT: 1521
  tags: oracle21c  

- name: Create Oracle 18c XE
  containers.podman.podman_container:
    name: oracle
    image: container-registry.oracle.com/database/express:18.4.0-xe
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1521:1521
    volume: /home/oracle:/opt/oracle/scripts/startup
    env:
      ORACLE_PWD: '{{ myPassword }}'
      ORACLE_CHARACTERSET: 'AL32UTF8'
  become: yes
  tags: oracle18c

- name: Set Oracle 18c Facts
  set_fact:
    DBNAME: Oracle 18c XE
    DBSHORT: ORACLE
    DBUSER: '{{ myUsername }} / SID - XE'
    DBPORT: 1521
  tags: oracle18c

- name: Create DB2
  containers.podman.podman_container:
    name: db2
    image: icr.io/db2_community/db2:latest
    state: started
    privileged: true
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 50000:50000
    env:
      LICENSE: accept
      DB2INSTANCE: '{{ myUsername }}'
      DB2INST1_PASSWORD: '{{ myPassword }}'
      DBNAME: '{{ myUsername }}'
    healthcheck: '/opt/ibm/db2/*/bin/db2gcf -s'
    healthcheck_interval: "30s"
    healthcheck_retries: 5
    healthcheck_start_period: "120s"
    healthcheck_timeout: "10s"
  become: yes
  tags: db2

- name: Set DB2 Facts
  set_fact:
    DBNAME: DB2 11.5 Community Edition 
    DBSHORT: DB2
    DBUSER: '{{ myUsername }}'
    DBPORT: 50000
  tags: db2

- name: Create PostgreSQL
  containers.podman.podman_container:
    name: postgres
    image: docker.io/postgres:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 5432:5432
    env:
      POSTGRES_USER: '{{ myUsername }}'
      POSTGRES_PASSWORD: '{{ myPassword }}'
      POSTGRES_DB: '{{ myUsername }}'
    healthcheck: 'pg_isready -d db_prod'
    healthcheck_interval: "30s"
    healthcheck_retries: 5
    healthcheck_start_period: "80s"
    healthcheck_timeout: "10s"
  become: yes
  tags: postgres

- name: Set PostgreSQL Facts
  set_fact:
    DBNAME: PostgreSQL 16.1  
    DBSHORT: POSTGRES
    DBUSER: '{{ myUsername }}'
    DBPORT: 5432
  tags: postgres

- name: Create Redis
  containers.podman.podman_container:
    name: redis
    image: docker.io/redis:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 6379:6379
    healthcheck: 'redis-cli ping || exit 1'
    healthcheck_interval: "10s"
    healthcheck_retries: 10
    healthcheck_start_period: "10s"
    healthcheck_timeout: "3s"
  become: yes
  tags: redis

- name: Set Redis Facts
  set_fact:
    DBNAME: Redis 7.2.3  
    DBSHORT: REDIS
    DBUSER: N/A
    DBPORT: 6379
  tags: redis

- name: Create IBM MQ
  containers.podman.podman_container:
    name: mq
    image: icr.io/ibm-messaging/mq:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 1414:1414
    env:
      LICENSE: accept
      MQ_QMGR_NAME: QM1
      MQ_ADMIN_PASSWORD: '{{ myPassword }}'
      MQ_APP_PASSWORD: '{{ myPassword }}'
    healthcheck: '/usr/local/bin/chkmqhealthy || exit 1'
    healthcheck_interval: "1m"
    healthcheck_retries: 3
    healthcheck_start_period: "60s"
    healthcheck_timeout: "30s"
  become: yes
  tags: mq

- name: Set IBM MQ Facts
  set_fact:
    DBNAME: IBM MQ 9.3  
    DBSHORT: MQ
    DBUSER: QM1
    DBPORT: 1414
  tags: mq

- name: Create MySQL
  containers.podman.podman_container:
    name: mysql
    image: container-registry.oracle.com/mysql/community-server:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 3306:3306
    env:
      MYSQL_ROOT_PASSWORD: '{{ myPassword }}'
      MYSQL_DATABASE: '{{ myUsername }}'
      MYSQL_USER: '{{ myUsername }}'
      MYSQL_PASSWORD: '{{ myPassword }}'
    healthcheck: 'mysqladmin ping'
    healthcheck_interval: "10s"
    healthcheck_retries: 3
    healthcheck_start_period: "30s"
    healthcheck_timeout: "10s"
  become: yes
  tags: mysql

- name: Set MySQL Facts
  set_fact:
    DBNAME: MySQL Server 8 Community Edition 
    DBSHORT: MYSQL
    DBUSER: '{{ myUsername }}'
    DBPORT: 3306
  tags: mysql

- name: Create Informix
  containers.podman.podman_container:
    name: informix
    image: icr.io/informix/informix-developer-database:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    hostname: ifx
    ports: 9088:9088
    env:
      LICENSE: accept
  become: yes
  tags: informix

- name: Set Informix Facts
  set_fact:
    DBNAME: Informix 14.10 Developer Edition  
    DBSHORT: INFORMIX
    DBUSER: informix
    DBPORT: 9088
  tags: informix

- name: Create Sybase
  containers.podman.podman_container:
    name: sybase
    image: superbeeeeeee/docker-sybase:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    ports: 5000:5000
    env:
      SA_PASSWORD: '{{ myPassword }}'
      DATABASE: '{{ myUsername }}'
  become: yes
  tags: sybase

- name: Set Sybase Facts
  set_fact:
    DBNAME: Sybase 16.2
    DBSHORT: SYBASE
    DBUSER: sa
    DBPORT: 5000
  tags: sybase

- name: Download OpenLDAP for ES Script
  get_url:
    url: https://raw.githubusercontent.com/UNiXMIT/UNiXMF/main/linux/openldap/podman.sh
    dest: /tmp/openldap.sh
    mode: '0775'
  tags: openldap
  register: result
  retries: 5
  delay: 30
  until: result is not failed

- name: Create OpenLDAP for ES Container
  ansible.builtin.command: /tmp/openldap.sh
  args:
    chdir: /tmp
  tags: openldap

- name: Set OpenLDAP Facts
  set_fact:
    DBNAME: OpenLDAP 2.6
    DBSHORT: OpenLDAP
    DBUSER: "cn=Manager,dc=secldap,dc=com / BASE - cn=Micro Focus,dc=secldap,dc=com"
    DBPORT: 1389
  tags: openldap

- name: Wait 10 seconds for OpenLDAP Container
  ansible.builtin.pause:
    seconds: 10

- name: Change OpenLDAP Password
  containers.podman.podman_container_exec:
    name: openldap
    command: /openldap/newpasswd.sh {{ myPassword }}

- name: Create APLS
  containers.podman.podman_container:
    name: apls
    image: docker.io/mfsharedtech/apls:latest
    state: started
    restart_policy: "always"
    detach: true
    interactive: true
    privileged: true
    ports: 4814:4814
    env:
      EULA='true'
      TIME_ZONE=GMT
  become: yes
  tags: apls

- name: Set APLS Facts
  set_fact:
    DBNAME: Micro Focus AutoPass License Server  
    DBSHORT: APLS
    DBUSER: 
    DBPORT: 4814
  tags: apls

- name: Add DB Tags
  amazon.aws.ec2_tag:
    # aws_profile: '{{ awsProfile }}'
    region: "{{ hostvars['localhost']['awsRegion'] }}"
    resource: '{{ item }}'
    tags:
      Name: "{{ semaphore_vars.task_details.username|upper }}-{{ imageName }} {{ DBSHORT }}"
      DB: '{{ DBNAME }}'
      DB_USER: '{{ DBUSER }}'
      DB_PORT: '{{ DBPORT }}'
    state: present
  loop: "{{ hostvars['localhost'].ec2.instance_ids }}"
  delegate_to: localhost
  tags: default