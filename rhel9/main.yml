---
- hosts: local
  gather_facts: no
  tasks:
  - name: SSO 2FA
    import_tasks: 
        file: sso.yml
    tags: default

- hosts: local
  gather_facts: no
  tasks:
  - name: Create AWS EC2 instance
    ec2_instance:
      name: '{{ imageName }}'
      image_id: '{{ awsAMI }}'
      key_name: '{{ keyName }}'
      network:  
        assign_public_ip: yes
        security-group: '{{ securityGroup }}'
      region: '{{ awsRegion }}'
      availability_zone: '{{ availabilityZone }}'
      aws_profile: '{{ awsProfile }}'
      instance_type: '{{ instanceType }}'
      count: '{{ vmCount }}'
      volumes:
      - device_name: '{{ deviceName }}'
        ebs:
         volume_type: '{{ volumeType }}'
         volume_size: '{{ volumeSize }}'
      state: running
      wait: true
    register: ec2
    tags: default

  - name: Destroy AWS EC2 instance
    ec2_instance:
      name: '{{ imageName }}'
      image_id: '{{ awsAMI }}'
      key_name: '{{ keyName }}'
      network:  
        assign_public_ip: yes
        security-group: '{{ securityGroup }}'
      region: '{{ awsRegion }}'
      availability_zone: '{{ availabilityZone }}'
      aws_profile: '{{ awsProfile }}'
      instance_type: '{{ instanceType }}'
      count: '{{ vmCount }}'
      volumes:
      - device_name: '{{ deviceName }}'
        ebs:
         volume_type: '{{ volumeType }}'
         volume_size: '{{ volumeSize }}'
      state: absent
    tags: destroy
  
  - name: Wait 10 seconds for public IP
    pause:
      seconds: 10
    tags: default

  - name: Add Host to awsEC2 Group 
    add_host: 
       hostname: '{{ item.public_ip_address }}'
       ansible_port: 22
       ansible_user: '{{ ansibleUser }}'
       ansible_ssh_private_key_file: '{{ keyLocation }}'
       groups: awsEC2
    loop: '{{ ec2.instances }}'
    tags: default
  
  - name: Generate an OpenSSL public key
    openssl_publickey:
      path: /tmp/support.pub
      privatekey_path: '{{ keyLocation }}'
      format: OpenSSH

  - name: SSH
    local_action:
      module: wait_for
      host: '{{ item.public_ip_address }}'
      port: 22
      delay: 10
      timeout: 120
    loop: '{{ ec2.instances }}'
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks:
  - name: Modify OS Config
    import_tasks: 
        file: system.yml
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks: 
  - name: Add Users
    import_tasks: users.yml
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks:
  - name: Install Software
    import_tasks: software.yml
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks:
  - name: Create Support Files and Directories
    import_tasks: createFilesDir.yml
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  vars:
    installPath: /home/products/es80PU3
  tasks:
  - name: Install ES 8.0 PU 3
    import_tasks: 
        file: es_80.yml
    tags: es80

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks:
  - name: Install extend 10.5.0
    import_tasks: 
        file: extend1050.yml
    tags: extend1050

- hosts: awsEC2
  gather_facts: yes
  become: yes
  tasks:
  - name: Create MOTD
    import_tasks: motd.yml
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks:
  - name: Add CRON Jobs
    import_tasks: cron.yml
    tags: default

- hosts: awsEC2
  gather_facts: no
  become: yes
  tasks:
  - name: Reboot EC2 Instance
    reboot:
    tags: default

- hosts: local
  gather_facts: no
  tasks:
  - name: AWS EC2 Instance Created and Setup
    debug:
      msg: 
      - 'AWS ID     - {{ item.instance_id }}'
      - 'Public IP  - {{ item.public_ip_address }}'
      - 'Private IP - {{ item.private_ip_address }}'
    loop: '{{ ec2.instances }}'
    tags: default