- name: Download ED 
  block:
    - name: Get {{ installerNameEDVS }} Download URL from S3
      amazon.aws.s3_object:
        profile: '{{ awsProfile }}'
        bucket: mturner
        mode: geturl
        object: '{{ S3Prefix }}{{ installerNameEDVS }}'
        region: eu-west-2
        expiry: 4000
        sig_v4: true
      register: s3edvs
      delegate_to: localhost

    - name: Get {{ installerNameEDE }} Download URL from S3
      amazon.aws.s3_object:
        profile: '{{ awsProfile }}'
        bucket: mturner
        mode: geturl
        object: '{{ S3Prefix }}{{ installerNameEDE }}'
        region: eu-west-2
        expiry: 4000
        sig_v4: true
      register: s3ede
      delegate_to: localhost

    - name: Get SafeNet License Download URL from S3
      amazon.aws.s3_object:
        profile: '{{ awsProfile }}'
        bucket: mturner
        mode: geturl
        object: ED/Licenses/lservrc.net
        region: eu-west-2
        expiry: 4000
        sig_v4: true
      register: s3sn
      delegate_to: localhost
    
    - name: Get AutoPass License Download URL from S3
      amazon.aws.s3_object:
        profile: '{{ awsProfile }}'
        bucket: mturner
        mode: geturl
        object: ED/Licenses/LicFile.txt
        region: eu-west-2
        expiry: 4000
        sig_v4: true
      register: s3ap
      delegate_to: localhost

    - name: Download {{ installerNameEDVS }}
      ansible.windows.win_get_url:
        url: '{{ s3edvs.url }}'
        dest: C:\MFInstallers\
    
    - name: Download {{ installerNameEDE }}
      ansible.windows.win_get_url:
        url: '{{ s3ede.url }}'
        dest: C:\MFInstallers\
    
    - name: Download SafeNet License
      ansible.windows.win_get_url:
        url: '{{ s3sn.url }}'
        dest: C:\MFInstallers\
    
    - name: Download AutoPass License
      ansible.windows.win_get_url:
        url: '{{ s3ap.url }}'
        dest: C:\MFInstallers\
  tags: ed

- name: Download ED PU 
  block:
    - name: Get {{ installerNameEDVSPU }} Download URL from S3
      amazon.aws.s3_object:
        profile: '{{ awsProfile }}'
        bucket: mturner
        mode: geturl
        object: '{{ S3PrefixPU }}{{ installerNameEDVSPU }}'
        region: eu-west-2
        expiry: 4000
        sig_v4: true
      register: s3edvspu
      delegate_to: localhost

    - name: Get {{ installerNameEDEPU }} Download URL from S3
      amazon.aws.s3_object:
        profile: '{{ awsProfile }}'
        bucket: mturner
        mode: geturl
        object: '{{ S3PrefixPU }}{{ installerNameEDEPU }}'
        region: eu-west-2
        expiry: 4000
        sig_v4: true
      register: s3edepu
      delegate_to: localhost
      
    - name: Download {{ installerNameEDVSPU }}
      ansible.windows.win_get_url:
        url: '{{ s3edvspu.url }}'
        dest: C:\MFInstallers\
    
    - name: Download {{ installerNameEDEPU }}
      ansible.windows.win_get_url:
        url: '{{ s3edepu.url }}'
        dest: C:\MFInstallers\
  tags: edpu

- name: Add ED Tags
  amazon.aws.ec2_tag:
    aws_profile: '{{ awsProfile }}'
    region: "{{ hostvars['localhost']['awsRegion'] }}"
    resource: '{{ item }}'
    tags:
      Name: '{{ semaphore_vars.task_details.username|upper }}-{{ imageName }} {{ productName }}'
      EDVS: '{{ installerNameEDVS }}'
      EDE: '{{ installerNameEDE }}'
    state: present
  loop: "{{ hostvars['localhost'].ec2.instance_ids }}"
  delegate_to: localhost
  tags: ed

- name: Add ED PU Tags
  amazon.aws.ec2_tag:
    aws_profile: '{{ awsProfile }}'
    region: "{{ hostvars['localhost']['awsRegion'] }}"
    resource: '{{ item }}'
    tags:
      EDVSPU: '{{ installerNameEDVSPU }}'
      EDEPU: '{{ installerNameEDEPU }}'
    state: present
  loop: "{{ hostvars['localhost'].ec2.instance_ids }}"
  delegate_to: localhost
  tags: edpu

- name: Install ED 
  block:
    - name: Install {{ installerNameEDVS }}
      win_package:
        path: C:\MFInstallers\{{ installerNameEDVS }}
        state: present
        arguments: /passive RumbaCheckbox=1 /log C:\MFInstallers\{{ installerNameEDVS }}.log /norestart
    
    - name: Install {{ installerNameEDE }}
      win_package:
        path: C:\MFInstallers\{{ installerNameEDE }}
        state: present
        arguments: /passive RumbaCheckbox=1 /log C:\MFInstallers\{{ installerNameEDE }}.log /norestart
  tags: ed

- name: Install ED PU
  block:
    - name: Install {{ installerNameEDVSPU }}
      win_package:
        path: C:\MFInstallers\{{ installerNameEDVSPU }}
        state: present
        arguments: /passive RumbaCheckbox=1 /log C:\MFInstallers\{{ installerNameEDVSPU }}.log /norestart
    
    - name: Install {{ installerNameEDEPU }}
      win_package:
        path: C:\MFInstallers\{{ installerNameEDEPU }}
        state: present
        arguments: /passive RumbaCheckbox=1 /log C:\MFInstallers\{{ installerNameEDEPU }}.log /norestart
  tags: edpu

# - name: Add License Server
#   win_lineinfile:
#     path: C:\ProgramData\Micro Focus\ces.ini
#     regex: '^lshost'
#     line: 'lshost = {{ licenseServer }}'
#   tags: ed

# - name: Install Safenet License File
#   win_get_url: 
#     url: '{{ SafenetFile }}'
#     dest: C:\ProgramData\Micro Focus\lservrc.net
#   tags: ed
  
- name: Install Safenet License File
  ansible.windows.win_copy:
    src: C:\MFInstallers\lservrc.net
    dest: C:\ProgramData\Micro Focus\lservrc.net
    remote_src: true
  tags: ed

# - name: Install AutoPass License File
#   win_get_url: 
#     url: '{{ AutoPassFile }}'
#     dest: C:\ProgramData\Micro Focus\LicFile.txt
#   ignore_errors: true
#   tags: ed

- name: Install AutoPass License File
  ansible.windows.win_copy:
    src: C:\MFInstallers\LicFile.txt
    dest: C:\ProgramData\Micro Focus\LicFile.txt
    remote_src: true
  ignore_errors: true
  tags: ed
  
- name: Stop MFDS Service
  ansible.windows.win_service:
    name: mf_CCITCP2
    state: stopped
  tags: ed

- name: Enable ESMAC UI
  win_command:
    cmd: '"C:\Program Files (x86)\Micro Focus\Enterprise Developer\bin\mfds.exe" --UI-on'
  ignore_errors: yes
  tags: ed

- name: Enable ESMAC Listen All
  win_command:
    cmd: '"C:\Program Files (x86)\Micro Focus\Enterprise Developer\bin\mfds.exe" --listen-all'
  tags: ed

- name: Start MFDS Service
  ansible.windows.win_service:
    name: mf_CCITCP2
    state: started
  tags: ed

- name: Pause for 10 seconds
  ansible.builtin.pause:
    seconds: 10
  tags: ed

- name: Import JCL Region
  win_command:
    cmd: '"C:\Program Files (x86)\Micro Focus\Enterprise Developer\bin\mfds.exe" -g 5 C:\MFSamples\JCL\JCL.xml'
    chdir: C:\MFSamples\JCL
  tags: ed

- name: Stop ESCWA Service
  ansible.windows.win_service:
    name: escwa
    state: stopped
  tags: ed

- name: Enable ESCWA Listen All
  community.windows.win_lineinfile:
    path: C:\ProgramData\Micro Focus\Enterprise Developer\ESCWA\commonwebadmin.json
    regex: 'MfRequestedEndpoint'
    line: '    "MfRequestedEndpoint" : "tcp:*:10086",'
  tags: ed

- name: Start ESCWA Service
  ansible.windows.win_service:
    name: escwa
    state: started
  tags: ed

- name: Start HACloud Service
  ansible.windows.win_service:
    name: mfhacloud
    start_mode: auto
    state: started
  tags: ed
  ignore_errors: true